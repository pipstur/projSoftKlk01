/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import com.mysql.cj.xdevapi.Statement;
import domain.Nastavnik;
import domain.Zvanje;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import modeli.NastavnikTableModel;

/**
 *
 * @author vojislav
 */
public class FrmTabela2 extends javax.swing.JFrame {

    /**
     * Creates new form FrmTabela2
     */
    List<Nastavnik> nastavnici = new ArrayList<>(); // obratite paznju na ovo
    
    public FrmTabela2() {
        initComponents();
        populateFields();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblNastavnici = new javax.swing.JTable();
        btnDodajRed = new javax.swing.JButton();
        btnObrisiRed = new javax.swing.JButton();
        btnSinhronizujSaBazom = new javax.swing.JButton();

        jButton2.setText("jButton2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblNastavnici.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblNastavnici);

        btnDodajRed.setText("Dodaj red");
        btnDodajRed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajRedActionPerformed(evt);
            }
        });

        btnObrisiRed.setText("Obrisi red");
        btnObrisiRed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiRedActionPerformed(evt);
            }
        });

        btnSinhronizujSaBazom.setText("Sinhronizuj sa bazom");
        btnSinhronizujSaBazom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSinhronizujSaBazomActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSinhronizujSaBazom)
                    .addComponent(btnDodajRed)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnObrisiRed))
                .addGap(15, 15, 15))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDodajRed)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnObrisiRed)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSinhronizujSaBazom)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDodajRedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajRedActionPerformed
        NastavnikTableModel model =(NastavnikTableModel) tblNastavnici.getModel();
        if(redoviValidni()){
            model.addRow(new Nastavnik()); // ovo je dodata funkcija u NastavnikTableModel klasu, obratite paznju sta mora da se override-uje a sta se kuca
        }else{
           JOptionPane.showMessageDialog(this, "Postoji nevalidna vrednost unutar tabele");

        }
    }//GEN-LAST:event_btnDodajRedActionPerformed

    private void btnObrisiRedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiRedActionPerformed
        int selectedRow = tblNastavnici.getSelectedRow();
    
        if (selectedRow != -1) { // Proverava se je l selektovan red
            NastavnikTableModel model =(NastavnikTableModel) tblNastavnici.getModel();
            model.removeRow(selectedRow);
        } else {
            JOptionPane.showMessageDialog(this, "Izaberite red za brisanje");
        }
    }//GEN-LAST:event_btnObrisiRedActionPerformed

    private void btnSinhronizujSaBazomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSinhronizujSaBazomActionPerformed
       String url = "jdbc:mysql://localhost:3306/projsoft";
       String user = "root";
       String pass = "";
        try {
            Connection connection = DriverManager.getConnection(url,user,pass);
            String upit = "select id, ime, prezime, zvanje_id from nastavnik where zvanje_id=5";
            List<Nastavnik> nastavniciProvera = new ArrayList<>();
            konekcijaIPunjenje(upit, connection, nastavniciProvera);
            // i sad bi trebalo da kros referenciramo ove objekte u bazi 
            // i da izbacimo iz baze ako nema id-a u sadasnjoj listi, a da dodamo ako ga nema u bazi
            
            // ovo sam koristio za proveru da l sam uzeo sve sto mi treba
//            for(Nastavnik nastavnik : nastavnici){
//                System.out.println(nastavnik);
//            }
//            System.out.println("a sad provera sa bazom");
//            for(Nastavnik nastavnik : nastavniciProvera){
//                System.out.println(nastavnik);
//            }
            
            // iako generalno ne bi trebalo da nestujemo dva for loopa zbog efikasnosti, ovo bi moglo da bude i binarna pretraga al me mrzi da namestam
            // prvo proveravamo da li ima nastavnika iz trenutne tabele u nastavniciProvera, kako bismo videli da li ima nesto novo
            // jer ako postoji trenutno a ne postoji u proveri to znaci da ne postoji u bazi, znaci dodati ga
            for(Nastavnik nastavnik : nastavnici){
                boolean nadjen = false;
                for(Nastavnik nastavnikPr : nastavniciProvera){
                    if(nastavnik.getId()==nastavnikPr.getId()){
                        nadjen = true;
                        updateNastavnika(nastavnik);
                        System.out.println(nastavnik+" apejdtovan");
                        // updatuje nastavnika u bazi 
                    } 
                }
                // nisam siguran je l ovo moze lakse al eto flag jednostavan da l ga je nasao 
                if(nadjen==false){
                        System.out.println(nastavnik+" stavljen u bazu");
                        createNastavnika(nastavnik);
                   }
            }
            
            // ne znam kako ovo drugacije XD al eto barem je intuitivno
            // a sad proveravamo da l ima u proveri a ne u trenutnoj tabeli, znaci njega treba obrisati, al necemo ih opet apdejtovati
            // jer smo to uradili u proslom
            
            for(Nastavnik nastavnikPr : nastavniciProvera){
                boolean nadjen = false;
                for(Nastavnik nastavnik : nastavnici){
                    if(nastavnik.getId()==nastavnikPr.getId()){
                        nadjen = true;
                    }
                }
                if(nadjen==false){
                    deleteNastavnika(nastavnikPr);
                    System.out.println(nastavnikPr + " je obrisan iz baze");
                }
            }
             this.dispose();     
            
        } catch (SQLException ex) {
            Logger.getLogger(FrmTabela2.class.getName()).log(Level.SEVERE, null, ex);
        }
       
               
    }//GEN-LAST:event_btnSinhronizujSaBazomActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDodajRed;
    private javax.swing.JButton btnObrisiRed;
    private javax.swing.JButton btnSinhronizujSaBazom;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblNastavnici;
    // End of variables declaration//GEN-END:variables

    private void populateFields() {
            Connection connection = null;
            String url = "jdbc:mysql://localhost:3306/projsoft";
            String user = "root";
            String pass = "";
        try {
            connection = DriverManager.getConnection(url, user, pass);
            //zvanje_id=5 je za nastavnike koji su redovni_profesor, pogledajte enum
            String upit = "select id,ime,prezime,zvanje_id from nastavnik where zvanje_id=5 order by zvanje_id";
            System.out.println(upit);
            
            // funkciju sam napravio da ne ponavljam kod dva puta
            konekcijaIPunjenje(upit, connection, nastavnici);
  
            tblNastavnici.setModel(new NastavnikTableModel(nastavnici));
            
            //za dodavanje comboboxa zvanja u adekvatnu kolonu
            JComboBox<Zvanje> comboBox = new JComboBox<>(Zvanje.values());
            TableColumn zvanjeColumn = tblNastavnici.getColumnModel().getColumn(2); // posto je treca kolona index=2
            zvanjeColumn.setCellEditor(new DefaultCellEditor(comboBox));
            
            tblNastavnici.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); // ovo je da se moze selektovati samo jedan red
                    } catch (SQLException ex) {
                        Logger.getLogger(FrmTabela.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
               
    private void konekcijaIPunjenje(String upit, Connection connection, List listaNastavnika) throws SQLException{
            PreparedStatement statement = connection.prepareStatement(upit);
            var rs = statement.executeQuery();
            while(rs.next()){
                Nastavnik nastavnik = new Nastavnik();
                nastavnik.setId(rs.getInt("id"));
                nastavnik.setIme(rs.getString("ime"));
                nastavnik.setPrezime(rs.getString("prezime"));
                nastavnik.setZvanje(Zvanje.valueOf(rs.getInt("zvanje_id")));
                listaNastavnika.add(nastavnik);
            }
    }
    private boolean redoviValidni() {
        var model = tblNastavnici.getModel();
        int brojRedova = model.getRowCount();
        
        // ovaj for loop je takav haos svaka mi cast 
        // u sustini sta treba da se desi je:
        // udje proveri da li je polje null prvo, onda ga konvertuje u string ako nije null i matchuje ga sa regexom i meri duzinu
        // pa ponavlja za sve redove po svim kolonama doduse za polje zvanje proverava samo da li je null posto se bira iz comboboxa
        // nz da l ce ovo da pukne al ne bi trebalo.. Bog da nam dusu prosti
        for(int i = 0; i < brojRedova;i++){
            if(model.getValueAt(i, 0)!=null) {
                String ime = model.getValueAt(i, 0).toString();
                if (!ime.matches("^[a-zA-Z]+$") || ime.length() >= 100) {
                    System.out.println(ime); // ovo sam koristio za proveru koje ime nije ok
                    return false;
                }
            }
            else{
                return false; 
            }
            if(model.getValueAt(i, 1)!=null){
                String prezime = model.getValueAt(i, 1).toString();
                if (!prezime.matches("^[a-zA-Z]+$") || prezime.length() > 100) {
                    System.out.println(prezime);// ovo sam koristio za proveru koje prezime nije ok
                    return false; 
                }
            }
            else{
                return false;
            }
            if(model.getValueAt(i, 2)==null) return false; // da proveri je l korisnik izabrao zvanje za novog profesora
            
        }
        
        return true;
    }

    private void createNastavnika(Nastavnik nastavnik) throws SQLException {
        String url = "jdbc:mysql://localhost:3306/projsoft";
        String user = "root";
        String pass = "";
        Connection connection = DriverManager.getConnection(url,user,pass);
        String upit = "insert into nastavnik (ime,prezime,zvanje_id) values(?,?,?)";
        
        PreparedStatement statement = connection.prepareStatement(upit);
        statement.setString(1, nastavnik.getIme());
        statement.setString(2, nastavnik.getPrezime());
        statement.setInt(3, nastavnik.getZvanje().getZvanjeId()); // getZvanjeId je implementirano kako bi mi bilo lakse da indeksiram u bazi
        int result = statement.executeUpdate();
        System.out.println("upisano: "+result+" redova");
    }
    
    private void updateNastavnika(Nastavnik nastavnik) throws SQLException {
        String url = "jdbc:mysql://localhost:3306/projsoft";
        String user = "root";
        String pass = "";
        Connection connection = DriverManager.getConnection(url,user,pass);
        String upit = "update nastavnik set ime=?, prezime=?, zvanje_id=? where id=?";
        PreparedStatement statement = connection.prepareStatement(upit);
        statement.setString(1, nastavnik.getIme());
        statement.setString(2, nastavnik.getPrezime());
        statement.setInt(3, nastavnik.getZvanje().getZvanjeId());
        statement.setInt(4, nastavnik.getId());
        int result = statement.executeUpdate();
        System.out.println("upisano: "+result+" redova");
    }

    private void deleteNastavnika(Nastavnik nastavnikPr) throws SQLException {
        String url = "jdbc:mysql://localhost:3306/projsoft";
        String user = "root";
        String pass = "";
        Connection connection = DriverManager.getConnection(url,user,pass);
        String upit = "delete from nastavnik where id="+nastavnikPr.getId();
        PreparedStatement statement = connection.prepareStatement(upit);
        int result = statement.executeUpdate();
        System.out.println("obrisano: "+result+" redova");
    }

    

    
}
